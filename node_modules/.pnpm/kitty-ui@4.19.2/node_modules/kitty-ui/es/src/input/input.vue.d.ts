declare type AutosizeObj = {
    minRows?: number;
    maxRows?: number;
};
declare const _sfc_main: import("vue").DefineComponent<{}, {
    inputProps: {
        modelValue: string | number;
        disabled?: boolean | undefined;
        size?: string | undefined;
        clearable?: boolean | undefined;
        showPassword?: boolean | undefined;
        prefixIcon?: string | undefined;
        suffixIcon?: string | undefined;
        autosize?: boolean | AutosizeObj | undefined;
    };
    inputEmits: {
        (e: 'update:modelValue', value: string): void;
        (e: 'change', value: string): void;
    };
    isClearAbled: import("vue").Ref<boolean>;
    changeInputVal: (event: Event) => void;
    attrs: {
        [x: string]: unknown;
    };
    styleClass: import("vue").ComputedRef<{
        [x: string]: string | boolean | import("vue").Slot | undefined;
        'is-disabled': boolean | undefined;
        "k-input-group k-input-prepend": import("vue").Slot | undefined;
        "k-input-group k-input-append": import("vue").Slot | undefined;
    }>;
    inputStyle: import("vue").ComputedRef<{
        "k-input--prefix": string | undefined;
    }>;
    isEnter: import("vue").Ref<boolean>;
    clearValue: () => void;
    ipt: import("vue").Ref<any>;
    eyeIcon: import("vue").Ref<string>;
    isShowEye: import("vue").ComputedRef<boolean | "" | 0 | undefined>;
    changeType: () => void;
    isShowSuffixIcon: import("vue").ComputedRef<boolean | "" | undefined>;
    isShowPrefixIcon: import("vue").ComputedRef<string | undefined>;
    textareaStyle: import("vue").Ref<any>;
    textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    readonly Icon: import("@kitty-ui/utils/withinstall").SFCWithInstall<import("vue").DefineComponent<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }, {
        iconName: import("vue").ComputedRef<string>;
        styleDot: import("vue").ComputedRef<{
            "kitty-dot": boolean;
        }>;
        badge: import("vue").ComputedRef<string | undefined>;
        iconColor: import("vue").ComputedRef<{
            color: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }>>, {
        dot: boolean;
    }>>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change")[], "update:modelValue" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {}>;
export default _sfc_main;
