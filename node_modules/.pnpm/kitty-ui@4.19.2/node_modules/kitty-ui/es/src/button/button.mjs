import "./style/index.css";
import { defineComponent as p, computed as l, useSlots as f, resolveComponent as k, openBlock as n, createElementBlock as m, normalizeClass as b, createBlock as u, createCommentVNode as t, renderSlot as y } from "vue";
import { buttonProps as F } from "./types.mjs";
import d from "../icon/icon.mjs";
import $ from "../../_virtual/plugin-vue_export-helper.mjs";
const C = p({
  name: "k-button",
  props: F,
  components: { Icon: d },
  setup(o) {
    const e = l(() => ({
      [`k-button--${o.type}`]: o.type,
      "is-plain": o.plain,
      "is-round": o.round,
      "is-disabled": o.disabled,
      [`k-button--${o.size}`]: o.size
    })), s = l(() => {
      const c = o.icon, a = o.iconPosition;
      return {
        iconName: c,
        position: a
      };
    }), i = f();
    return {
      styleClass: e,
      Icon: d,
      iconFont: s,
      slots: i
    };
  }
}), N = {
  key: 1,
  class: "k-button-text"
};
function h(o, e, s, i, c, a) {
  const r = k("Icon");
  return n(), m("button", {
    class: b(["k-button", o.styleClass])
  }, [
    o.iconFont.iconName && o.iconFont.position != "right" ? (n(), u(r, {
      key: 0,
      name: o.iconFont.iconName
    }, null, 8, ["name"])) : t("", !0),
    o.slots.default ? (n(), m("span", N, [
      y(o.$slots, "default")
    ])) : t("", !0),
    o.iconFont.position == "right" && o.iconFont.iconName ? (n(), u(r, {
      key: 2,
      name: o.iconFont.iconName
    }, null, 8, ["name"])) : t("", !0)
  ], 2);
}
const P = /* @__PURE__ */ $(C, [["render", h]]);
export {
  P as default
};
