import { default as Button } from './button';
import { default as Icon } from './icon';
import { default as Link } from './link';
import { default as Upload } from './upload';
import { default as Shake } from './shake';
import { default as Input } from './input';
export { Button, Icon, Link, Upload, Shake, Input };
declare const _default: (import("@kitty-ui/utils/withinstall").SFCWithInstall<import("vue").DefineComponent<{
    type: {
        type: StringConstructor;
        validator(value: string): boolean;
    };
    plain: BooleanConstructor;
    round: BooleanConstructor;
    disabled: BooleanConstructor;
    icon: StringConstructor;
    iconPosition: StringConstructor;
    size: {
        type: StringConstructor;
        validator(value: string): boolean;
    };
}, {
    styleClass: import("vue").ComputedRef<{
        [x: string]: string | boolean | undefined;
        'is-plain': boolean;
        'is-round': boolean;
        'is-disabled': boolean;
    }>;
    Icon: import("vue").DefineComponent<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }, {
        iconName: import("vue").ComputedRef<string>;
        styleDot: import("vue").ComputedRef<{
            "kitty-dot": boolean;
        }>;
        badge: import("vue").ComputedRef<string | undefined>;
        iconColor: import("vue").ComputedRef<{
            color: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }>>, {
        dot: boolean;
    }>;
    iconFont: import("vue").ComputedRef<{
        iconName: string | undefined;
        position: string | undefined;
    }>;
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: StringConstructor;
        validator(value: string): boolean;
    };
    plain: BooleanConstructor;
    round: BooleanConstructor;
    disabled: BooleanConstructor;
    icon: StringConstructor;
    iconPosition: StringConstructor;
    size: {
        type: StringConstructor;
        validator(value: string): boolean;
    };
}>>, {
    plain: boolean;
    round: boolean;
    disabled: boolean;
}>> | import("@kitty-ui/utils/withinstall").SFCWithInstall<import("vue").DefineComponent<{
    name: {
        type: StringConstructor;
    };
    dot: {
        type: BooleanConstructor;
    };
    badge: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
    };
}, {
    iconName: import("vue").ComputedRef<string>;
    styleDot: import("vue").ComputedRef<{
        "kitty-dot": boolean;
    }>;
    badge: import("vue").ComputedRef<string | undefined>;
    iconColor: import("vue").ComputedRef<{
        color: string | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: StringConstructor;
    };
    dot: {
        type: BooleanConstructor;
    };
    badge: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
    };
}>>, {
    dot: boolean;
}>> | import("@kitty-ui/utils/withinstall").SFCWithInstall<import("vue").DefineComponent<{
    type: {
        type: StringConstructor;
        validator(value: string): boolean;
    };
    disabled: BooleanConstructor;
    underline: BooleanConstructor;
}, {
    attrs: {
        [x: string]: unknown;
    };
    styleClass: import("vue").ComputedRef<{
        [x: string]: string | boolean | undefined;
        'is-disabled': boolean;
        'is-underline': boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: StringConstructor;
        validator(value: string): boolean;
    };
    disabled: BooleanConstructor;
    underline: BooleanConstructor;
}>>, {
    disabled: boolean;
    underline: boolean;
}>> | import("@kitty-ui/utils/withinstall").SFCWithInstall<import("vue").DefineComponent<{}, {
    props: any;
    kIpt: import("vue").Ref<any>;
    emits: (e: "getFilesList", value: File[]) => void;
    filesList: import("vue").Ref<{
        readonly lastModified: number;
        readonly name: string;
        readonly webkitRelativePath: string;
        readonly size: number;
        readonly type: string;
        arrayBuffer: () => Promise<ArrayBuffer>;
        slice: (start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob;
        stream: () => ReadableStream<Uint8Array>;
        text: () => Promise<string>;
    }[]>;
    fileUpload: () => void;
    getFiles: (e: Event) => void;
    delFile: (index: number) => void;
    getFilesList: (file: File[]) => void;
    Icon: import("vue").DefineComponent<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }, {
        iconName: import("vue").ComputedRef<string>;
        styleDot: import("vue").ComputedRef<{
            "kitty-dot": boolean;
        }>;
        badge: import("vue").ComputedRef<string | undefined>;
        iconColor: import("vue").ComputedRef<{
            color: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }>>, {
        dot: boolean;
    }>;
    Drager: import("vue").DefineComponent<{}, {
        emits: (event: "getFilesList" | "fileUpload", ...args: any[]) => void;
        fileArea: import("vue").Ref<any>;
        isEnter: import("vue").Ref<boolean>;
        timer: import("vue").Ref<number | null>;
        filesList: import("vue").Ref<{
            readonly lastModified: number;
            readonly name: string;
            readonly webkitRelativePath: string;
            readonly size: number;
            readonly type: string;
            arrayBuffer: () => Promise<ArrayBuffer>;
            slice: (start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob;
            stream: () => ReadableStream<Uint8Array>;
            text: () => Promise<string>;
        }[]>;
        onDragover: (e: Event) => void;
        Icon: import("vue").DefineComponent<{
            name: {
                type: StringConstructor;
            };
            dot: {
                type: BooleanConstructor;
            };
            badge: {
                type: StringConstructor;
            };
            color: {
                type: StringConstructor;
            };
        }, {
            iconName: import("vue").ComputedRef<string>;
            styleDot: import("vue").ComputedRef<{
                "kitty-dot": boolean;
            }>;
            badge: import("vue").ComputedRef<string | undefined>;
            iconColor: import("vue").ComputedRef<{
                color: string | undefined;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
            };
            dot: {
                type: BooleanConstructor;
            };
            badge: {
                type: StringConstructor;
            };
            color: {
                type: StringConstructor;
            };
        }>>, {
            dot: boolean;
        }>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("getFilesList" | "fileUpload")[], "getFilesList" | "fileUpload", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
        onGetFilesList?: ((...args: any[]) => any) | undefined;
        onFileUpload?: ((...args: any[]) => any) | undefined;
    }, {}>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "getFilesList"[], "getFilesList", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onGetFilesList?: ((...args: any[]) => any) | undefined;
}, {}>> | import("@kitty-ui/utils/withinstall").SFCWithInstall<import("vue").DefineComponent<{}, {
    props: any;
    emits: (e: "update:modelValue", value: boolean) => void;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}>> | import("@kitty-ui/utils/withinstall").SFCWithInstall<import("vue").DefineComponent<{}, {
    inputProps: {
        modelValue: string | number;
        disabled?: boolean | undefined;
        size?: string | undefined;
        clearable?: boolean | undefined;
        showPassword?: boolean | undefined;
        prefixIcon?: string | undefined;
        suffixIcon?: string | undefined;
        autosize?: boolean | {
            minRows?: number | undefined;
            maxRows?: number | undefined;
        } | undefined;
    };
    inputEmits: {
        (e: "update:modelValue", value: string): void;
        (e: "change", value: string): void;
    };
    isClearAbled: import("vue").Ref<boolean>;
    changeInputVal: (event: Event) => void;
    attrs: {
        [x: string]: unknown;
    };
    styleClass: import("vue").ComputedRef<{
        [x: string]: string | boolean | import("vue").Slot | undefined;
        'is-disabled': boolean | undefined;
        "k-input-group k-input-prepend": import("vue").Slot | undefined;
        "k-input-group k-input-append": import("vue").Slot | undefined;
    }>;
    inputStyle: import("vue").ComputedRef<{
        "k-input--prefix": string | undefined;
    }>;
    isEnter: import("vue").Ref<boolean>;
    clearValue: () => void;
    ipt: import("vue").Ref<any>;
    eyeIcon: import("vue").Ref<string>;
    isShowEye: import("vue").ComputedRef<boolean | "" | 0 | undefined>;
    changeType: () => void;
    isShowSuffixIcon: import("vue").ComputedRef<boolean | "" | undefined>;
    isShowPrefixIcon: import("vue").ComputedRef<string | undefined>;
    textareaStyle: import("vue").Ref<any>;
    textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    readonly Icon: import("@kitty-ui/utils/withinstall").SFCWithInstall<import("vue").DefineComponent<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }, {
        iconName: import("vue").ComputedRef<string>;
        styleDot: import("vue").ComputedRef<{
            "kitty-dot": boolean;
        }>;
        badge: import("vue").ComputedRef<string | undefined>;
        iconColor: import("vue").ComputedRef<{
            color: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }>>, {
        dot: boolean;
    }>>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change")[], "update:modelValue" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {}>>)[];
export default _default;
