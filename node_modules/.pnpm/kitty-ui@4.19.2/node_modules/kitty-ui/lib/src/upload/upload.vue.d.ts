export declare type Emits = {
    (e: 'getFilesList', value: File[]): void;
};
declare const _sfc_main: import("vue").DefineComponent<{}, {
    props: any;
    kIpt: import("vue").Ref<any>;
    emits: (e: 'getFilesList', value: File[]) => void;
    filesList: import("vue").Ref<{
        readonly lastModified: number;
        readonly name: string;
        readonly webkitRelativePath: string;
        readonly size: number;
        readonly type: string;
        arrayBuffer: () => Promise<ArrayBuffer>;
        slice: (start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob;
        stream: () => ReadableStream<Uint8Array>;
        text: () => Promise<string>;
    }[]>;
    fileUpload: () => void;
    getFiles: (e: Event) => void;
    delFile: (index: number) => void;
    getFilesList: (file: File[]) => void;
    Icon: import("vue").DefineComponent<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }, {
        iconName: import("vue").ComputedRef<string>;
        styleDot: import("vue").ComputedRef<{
            "kitty-dot": boolean;
        }>;
        badge: import("vue").ComputedRef<string | undefined>;
        iconColor: import("vue").ComputedRef<{
            color: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        name: {
            type: StringConstructor;
        };
        dot: {
            type: BooleanConstructor;
        };
        badge: {
            type: StringConstructor;
        };
        color: {
            type: StringConstructor;
        };
    }>>, {
        dot: boolean;
    }>;
    Drager: import("vue").DefineComponent<{}, {
        emits: (event: "getFilesList" | "fileUpload", ...args: any[]) => void;
        fileArea: import("vue").Ref<any>;
        isEnter: import("vue").Ref<boolean>;
        timer: import("vue").Ref<number | null>;
        filesList: import("vue").Ref<{
            readonly lastModified: number;
            readonly name: string;
            readonly webkitRelativePath: string;
            readonly size: number;
            readonly type: string;
            arrayBuffer: () => Promise<ArrayBuffer>;
            slice: (start?: number | undefined, end?: number | undefined, contentType?: string | undefined) => Blob;
            stream: () => ReadableStream<Uint8Array>;
            text: () => Promise<string>;
        }[]>;
        onDragover: (e: Event) => void;
        Icon: import("vue").DefineComponent<{
            name: {
                type: StringConstructor;
            };
            dot: {
                type: BooleanConstructor;
            };
            badge: {
                type: StringConstructor;
            };
            color: {
                type: StringConstructor;
            };
        }, {
            iconName: import("vue").ComputedRef<string>;
            styleDot: import("vue").ComputedRef<{
                "kitty-dot": boolean;
            }>;
            badge: import("vue").ComputedRef<string | undefined>;
            iconColor: import("vue").ComputedRef<{
                color: string | undefined;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
            };
            dot: {
                type: BooleanConstructor;
            };
            badge: {
                type: StringConstructor;
            };
            color: {
                type: StringConstructor;
            };
        }>>, {
            dot: boolean;
        }>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("getFilesList" | "fileUpload")[], "getFilesList" | "fileUpload", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
        onGetFilesList?: ((...args: any[]) => any) | undefined;
        onFileUpload?: ((...args: any[]) => any) | undefined;
    }, {}>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "getFilesList"[], "getFilesList", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onGetFilesList?: ((...args: any[]) => any) | undefined;
}, {}>;
export default _sfc_main;
